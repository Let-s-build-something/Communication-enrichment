name: Distribute iOS artifact

on:
  # Reusable workflows (other workflows can trigger this)
  workflow_call:
  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:

    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.ACTION_DEPLOY_KEY }}
      # We need Xcode to build the iOS app
      - uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: 15.3
      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # Prepare access to everything
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Decode Local properties
        run: echo "${{ secrets.LOCAL_PROPERTIES }}" | base64 --decode > ${{ github.workspace }}/local.properties
      - name: Decode Keystore
        run: echo "${{ secrets.KEYSTORE }}" | base64 --decode > /Users/runner/work/keystore.jks
      - name: Decode google-services.json
        run: echo "${{ secrets.GOOGLE_SERVICES }}" | base64 --decode > ${{ github.workspace }}/composeApp/google-services.json

      # Prepare Apple certificates
      - name: Import Apple certificates
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_P12_PASSWORD }}

        # Download provisioning profiles
      - name: Download Apple provisioning profiles
        uses: apple-actions/download-provisioning-profiles@v2
        with:
          bundle-id: ${{ secrets.APPLE_BUNDLE_ID }}
          issuer-id: ${{ secrets.APP_STORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_PRIVATE_KEY }}

      - name: Install CocoaPods dependencies
        run: |
          ./gradlew -q syncWithGradleFiles
          cd iosApp
          pod install

        # iOS - create .ipa file
      - name: Build archive
        run: |
          cd iosApp

          xcrun xcodebuild \
            -workspace "iosApp.xcworkspace" \
            -scheme "iosApp" \
            -configuration "Release" \
            -sdk "iphoneos" \
            -parallelizeTargets \
            -showBuildTimingSummary \
            -disableAutomaticPackageResolution \
            -derivedDataPath "${RUNNER_TEMP}/Build/DerivedData" \
            -archivePath "${RUNNER_TEMP}/Build/Archives/iosApp.xcarchive" \
            -resultBundlePath "${RUNNER_TEMP}/Build/Artifacts/iosApp.xcresult" \
            -destination "generic/platform=iOS" \
            DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
            PRODUCT_BUNDLE_IDENTIFIER="${{ secrets.APPLE_BUNDLE_ID }}${{ secrets.APPLE_TEAM_ID }}" \
            CODE_SIGN_STYLE="Manual" \
            PROVISIONING_PROFILE_SPECIFIER="${{ secrets.APPLE_PROVISIONING_PROFILE_NAME }}" \
            archive

      - name: Generate ExportOptions.plist
        run: |
          cat <<EOF > ${RUNNER_TEMP}/Build/ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>destination</key>
              <string>export</string>
              <key>method</key>
              <string>app-store</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>generateAppStoreInformation</key>
              <true/>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>teamID</key>
              <string>${{ secrets.APPLE_TEAM_ID }}</string>
              <key>uploadSymbols</key>
              <true/>
              <key>provisioningProfiles</key>
              <dict>
                <key>${{ secrets.APPLE_BUNDLE_ID }}</key>
                <string>${{ secrets.APPLE_PROVISIONING_PROFILE_NAME_DIST }}</string>
              </dict>
            </dict>
          </plist>
          EOF

      - name: export archive
        id: export_archive
        run: |
          xcrun xcodebuild \
            -exportArchive \
            -exportOptionsPlist "${RUNNER_TEMP}/Build/ExportOptions.plist" \
            -archivePath "${RUNNER_TEMP}/Build/Archives/iosApp.xcarchive" \
            -exportPath "${RUNNER_TEMP}/Build/Archives/iosApp.xcarchive" \
            PRODUCT_BUNDLE_IDENTIFIER="${{ secrets.APPLE_BUNDLE_ID }}${{ secrets.APPLE_TEAM_ID }}"

      - name: Upload app to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: ${RUNNER_TEMP}/Build/Archives/iosApp.xcarchive/iosApp.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}